---
- hosts: all
  become: true
  tasks:
  - include_vars: vars-debian.yml
    when: ansible_os_family == 'Debian'

  # ----- 2.1. Installing Docker and dependencies ------------------------------------------------------
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce={{ docker_version }}
      - docker-ce-cli={{ docker_version }}
      - containerd.io
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

  # ----- 2.2. Disabling swap --------------------------------------------------------------------------
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  # ----- 2.3. Installing kubelet, kubeadm and kubectl -------------------------------------------------
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

  # ----- 2.4. Initializing the Kubernetes cluster with kubeadm ----------------------------------------
  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="{{ k8s_master_ip }}" --apiserver-cert-extra-sans="{{ k8s_master_ip }}" --node-name k8s-master --pod-network-cidr="{{ pod_network_cidr }}"

  # ----- 2.5. Setting up the kube config file for the vagrant user to access the Kubernetes cluster ---
  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/vagrant/.kube
     - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
     - chown vagrant:vagrant /home/vagrant/.kube/config

  # ----- 2.6. Setting up the container networking provider and the network policy engine --------------
  - name: Install calico pod network
    become: false
#    command: kubectl create -f https://docs.projectcalico.org/v3.7/getting-started/kubernetes/installation/hosted/calico.yaml
    command: kubectl apply -f https://docs.projectcalico.org/v3.9/manifests/calico.yaml

  # ----- 2.7. Generating kube join command for joining the node to the Kubernetes cluster -------------
  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Debuging join command
    debug:
      msg: "join_command='{{join_command}}'"

  - name: Copy join command to local file
    become: false
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

  # ----- 2.8. Setting up a handler for checking Docker daemon -----------------------------------------
  handlers:
    - name: docker status
      service: name=docker state=started

